{
  "results": {
    "aime24_nofigures": {
      "alias": "aime24_nofigures",
      "exact_match,none": 0.0,
      "exact_match_stderr,none": "N/A",
      "extracted_answers,none": -1,
      "extracted_answers_stderr,none": "N/A"
    }
  },
  "group_subtasks": {
    "aime24_nofigures": []
  },
  "configs": {
    "aime24_nofigures": {
      "task": "aime24_nofigures",
      "tag": [
        "math_word_problems"
      ],
      "dataset_path": "simplescaling/aime24_nofigures",
      "dataset_name": "default",
      "test_split": "train",
      "process_docs": "def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:\n    def _process_doc(doc: dict) -> dict:\n        solution = doc.get(\"solution\", doc.get(\"orig_solution\", doc.get(\"orig_orig_solution\")))\n        problem = doc.get(\"problem\", doc.get(\"question\"))\n        answer = doc.get(\"answer\", doc.get(\"orig_answer\", doc.get(\"orig_orig_answer\")))\n        if solution is None:\n            print(\"Warning: No solution found; DOC:\", doc)\n        out_doc = {\n            \"problem\": problem,\n            \"solution\": solution,\n            \"answer\": answer,\n        }\n        if getattr(doc, \"few_shot\", None) is not None:\n            out_doc[\"few_shot\"] = True\n        return out_doc\n    return dataset.map(_process_doc)\n",
      "doc_to_text": "def doc_to_text(doc: dict) -> str:\n    return QUERY_TEMPLATE.format(Question=doc.get(\"problem\", doc.get(\"question\")))\n",
      "doc_to_target": "answer",
      "process_results": "def process_results(doc: dict, results: Union[List[str], str]) -> Dict[str, Any]:\n    eval_logger.info(f\"DEBUG - process_results received results type: {type(results)}\")\n    if isinstance(results, list):\n        eval_logger.info(f\"DEBUG - process_results received list of length: {len(results)}\")\n    else:\n        eval_logger.info(f\"DEBUG - process_results received single string.\")\n\n    # If a single string is passed (e.g., n=1 or task doesn't use n), wrap it in a list for uniform processing.\n    if isinstance(results, str):\n        results = [results]\n\n    metrics: Dict[str, Any] = {\"exact_match\": None, \"extracted_answers\": -1} # Default extracted_answers to -1\n\n    gt = str(doc[\"answer\"])\n    if gt.isdigit():\n        gt = str(int(gt))\n\n    split_tokens = [\"<|im_start|>answer\\n\", \"<|im_start|>\"]\n    \n    all_extracted_numbers_for_doc = []\n    all_exact_match_flags_for_doc = []\n\n    for i_sample, a_raw in enumerate(results, start=1):\n        a = a_raw # Make a copy to modify\n        original_a_for_debug = a \n\n        if split_tokens[0] in a:\n            a = a.split(split_tokens[0])[-1]\n        elif split_tokens[1] in a:\n            a = a.split(split_tokens[1])[-1]\n            if \"\\n\" in a:\n                a = \"\\n\".join(a.split(\"\\n\")[1:])\n\n        if (box := last_boxed_only_string(a)) is not None:\n            a = remove_boxed(box)\n        elif (matches := re.findall(ANSWER_PATTERN, a, re.DOTALL)) != []:\n            a = matches[-1]\n\n        processed_a_text = str(a).strip() # This is the text we'll try to convert to a number\n\n        # Fallback extraction logic\n        extracted_num_this_sample = -1\n        if processed_a_text.isdigit() and 0 <= int(processed_a_text) <= 999:\n            extracted_num_this_sample = int(processed_a_text)\n        else:\n            # Try basic number extraction as fallback if not directly a digit or out of AIME range\n            eval_logger.warning(f\"Non-numeric or out-of-range extraction '{processed_a_text[:100]}...', trying fallback.\")\n            numbers_found = re.findall(r'\\b(\\d+)\\b', processed_a_text)\n            if numbers_found:\n                candidate_num_str = numbers_found[-1] # Take last number\n                if candidate_num_str.isdigit() and 0 <= int(candidate_num_str) <= 999:\n                    extracted_num_this_sample = int(candidate_num_str)\n                    eval_logger.info(f\"Fallback extracted: '{extracted_num_this_sample}' from '{processed_a_text[:50]}'\")\n                else:\n                    eval_logger.warning(f\"Fallback number '{candidate_num_str}' out of AIME range.\")\n                    extracted_num_this_sample = 999 # Placeholder for out-of-range/invalid\n            else:\n                eval_logger.warning(f\"No numbers found in fallback for '{processed_a_text[:50]}'.\")\n                extracted_num_this_sample = 999 # Placeholder for no number found\n\n        all_extracted_numbers_for_doc.append(extracted_num_this_sample)\n        \n        # Compare the processed text `a` for exact match purposes against string GT\n        is_correct_this_sample = int(str(a if not str(a).isdigit() else str(int(a))) == gt)\n        all_exact_match_flags_for_doc.append(is_correct_this_sample)\n\n        eval_logger.info(f\"DEBUG - Sample {i_sample}: Raw='{original_a_for_debug[:100]}...', ProcessedText='{str(a)}', ExtractedNum={extracted_num_this_sample}, GT='{gt}', EM={is_correct_this_sample}\")\n\n    # --- After processing all samples for the doc ---\n    \n    # For single \"exact_match\" metric (often first sample or if n=1)\n    if all_exact_match_flags_for_doc:\n        metrics[\"exact_match\"] = all_exact_match_flags_for_doc[0]\n\n    # Final \"extracted_answers\" for the doc (e.g. majority vote on extracted numbers)\n    if all_extracted_numbers_for_doc:\n        valid_extracted_numbers = [num for num in all_extracted_numbers_for_doc if num != -1 and num != 999] # Exclude placeholders\n        if valid_extracted_numbers:\n            counts = Counter(valid_extracted_numbers)\n            metrics[\"extracted_answers\"] = counts.most_common(1)[0][0]\n        else: # No valid numbers extracted across all samples\n            metrics[\"extracted_answers\"] = -1 \n            # If there were samples but all led to -1/999, we might pick the first placeholder\n            if all_extracted_numbers_for_doc:\n                 metrics[\"extracted_answers\"] = all_extracted_numbers_for_doc[0]\n\n\n    num_total_samples = len(all_exact_match_flags_for_doc)\n    if num_total_samples > 1:\n        # Ensure 'exact_matches' (plural) for per-sample EM results if it's in metric_list\n        # This depends on how your YAML is set up for what gets aggregated.\n        # For now, let's assume it's not directly stored back into metrics unless YAML asks for it.\n        # metrics[\"exact_matches\"] = all_exact_match_flags_for_doc \n\n        # Calculate cov@k and maj@k\n        # Define k values based on common practice or YAML (e.g. 2, 4, 8 if num_total_samples >= 8)\n        k_values_for_metrics = []\n        if num_total_samples >= 2: k_values_for_metrics.append(2)\n        if num_total_samples >= 4: k_values_for_metrics.append(4)\n        if num_total_samples >= 8: k_values_for_metrics.append(8)\n        # Add more k as needed, or derive from n_res_list as before\n\n        for k in k_values_for_metrics:\n            if k > num_total_samples: continue\n\n            first_k_em_flags = all_exact_match_flags_for_doc[:k]\n            \n            # Coverage @ k\n            metrics[f\"cov@{k}\"] = int(1 in first_k_em_flags)\n            \n            # Majority @ k\n            if first_k_em_flags:\n                em_counts_at_k = Counter(first_k_em_flags)\n                # Majority if count of '1's is > k/2\n                # Or if count of '1's is k/2 and it's the only one (or tie-break if needed)\n                if em_counts_at_k.get(1, 0) > k / 2.0:\n                    metrics[f\"maj@{k}\"] = 1\n                elif k > 1 and em_counts_at_k.get(1, 0) == k / 2.0 and em_counts_at_k.get(1,0) >= em_counts_at_k.get(0,0): # Tie break for 1s\n                     metrics[f\"maj@{k}\"] = 1\n                else:\n                    metrics[f\"maj@{k}\"] = 0\n            else: # Should not happen if k <= num_total_samples and num_total_samples > 0\n                metrics[f\"maj@{k}\"] = 0\n\n\n    eval_logger.info(f\"FINAL DEBUG - Metrics for doc '{doc.get('id', 'N/A')}': {metrics}\")\n    return metrics\n",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "extracted_answers",
          "aggregation": "bypass",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [],
        "do_sample": false,
        "temperature": 0.0,
        "max_gen_toks": 2048,
        "max_tokens_thinking": 1800,
        "num_return_sequences": 8,
        "thinking_n_ignore_str": "\"Wait###Hmm I should double-check this.###Do we need to think more?###Let me verify this calculation.###I need to analyze this from another angle.###Let me work through this step-by-step.###Am I confident in this result?###Let me trace through the logic again.###This deserves more careful analysis.###Let me reason through this systematically.###Is this correct like this?###Could this be wrong###So given this and that###Is this the right conclusion?###Is this sound?###Is this a logical conclusion...?\""
      },
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    }
  },
  "versions": {
    "aime24_nofigures": 1.0
  },
  "n-shot": {
    "aime24_nofigures": 0
  },
  "higher_is_better": {
    "aime24_nofigures": {
      "exact_match": true,
      "extracted_answers": true
    }
  },
  "n-samples": {
    "aime24_nofigures": {
      "original": 30,
      "effective": 3
    }
  },
  "config": {
    "model": "vllm",
    "model_args": "pretrained=simplescaling/s1.1-1.5B,tensor_parallel_size=1,gpu_memory_utilization=0.85",
    "batch_size": "auto",
    "batch_sizes": [],
    "device": null,
    "use_cache": null,
    "limit": 3.0,
    "bootstrap_iters": 0,
    "gen_kwargs": {
      "max_gen_toks": 2048,
      "max_tokens_thinking": 1800,
      "num_return_sequences": 8,
      "thinking_n_ignore_str": "\"Wait###Hmm I should double-check this.###Do we need to think more?###Let me verify this calculation.###I need to analyze this from another angle.###Let me work through this step-by-step.###Am I confident in this result?###Let me trace through the logic again.###This deserves more careful analysis.###Let me reason through this systematically.###Is this correct like this?###Could this be wrong###So given this and that###Is this the right conclusion?###Is this sound?###Is this a logical conclusion...?\""
    },
    "random_seed": 0,
    "numpy_seed": 1234,
    "torch_seed": 1234,
    "fewshot_seed": 1234
  },
  "git_hash": "74a7609",
  "date": 1748366236.2822604,
  "pretty_env_info": "PyTorch version: 2.6.0+cu124\nIs debug build: False\nCUDA used to build PyTorch: 12.4\nROCM used to build PyTorch: N/A\n\nOS: Ubuntu 22.04.5 LTS (x86_64)\nGCC version: (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0\nClang version: Could not collect\nCMake version: version 3.22.1\nLibc version: glibc-2.35\n\nPython version: 3.10.12 (main, Feb  4 2025, 14:57:36) [GCC 11.4.0] (64-bit runtime)\nPython platform: Linux-6.8.0-52-generic-x86_64-with-glibc2.35\nIs CUDA available: True\nCUDA runtime version: 12.8.61\nCUDA_MODULE_LOADING set to: LAZY\nGPU models and configuration: GPU 0: NVIDIA A100-SXM4-40GB\nNvidia driver version: 570.124.06\ncuDNN version: Could not collect\nHIP runtime version: N/A\nMIOpen runtime version: N/A\nIs XNNPACK available: True\n\nCPU:\nArchitecture:                         x86_64\nCPU op-mode(s):                       32-bit, 64-bit\nAddress sizes:                        48 bits physical, 48 bits virtual\nByte Order:                           Little Endian\nCPU(s):                               30\nOn-line CPU(s) list:                  0-29\nVendor ID:                            AuthenticAMD\nModel name:                           AMD EPYC 7J13 64-Core Processor\nCPU family:                           25\nModel:                                1\nThread(s) per core:                   1\nCore(s) per socket:                   1\nSocket(s):                            30\nStepping:                             1\nBogoMIPS:                             4899.99\nFlags:                                fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 syscall nx mmxext fxsr_opt pdpe1gb rdtscp lm rep_good nopl cpuid extd_apicid tsc_known_freq pni pclmulqdq ssse3 fma cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand hypervisor lahf_lm cmp_legacy svm cr8_legacy abm sse4a misalignsse 3dnowprefetch osvw perfctr_core ssbd ibrs ibpb stibp vmmcall fsgsbase tsc_adjust bmi1 avx2 smep bmi2 erms invpcid rdseed adx smap clflushopt clwb sha_ni xsaveopt xsavec xgetbv1 xsaves clzero xsaveerptr wbnoinvd arat npt nrip_save umip pku ospke vaes vpclmulqdq rdpid fsrm arch_capabilities\nVirtualization:                       AMD-V\nHypervisor vendor:                    KVM\nVirtualization type:                  full\nL1d cache:                            1.9 MiB (30 instances)\nL1i cache:                            1.9 MiB (30 instances)\nL2 cache:                             15 MiB (30 instances)\nL3 cache:                             480 MiB (30 instances)\nNUMA node(s):                         1\nNUMA node0 CPU(s):                    0-29\nVulnerability Gather data sampling:   Not affected\nVulnerability Itlb multihit:          Not affected\nVulnerability L1tf:                   Not affected\nVulnerability Mds:                    Not affected\nVulnerability Meltdown:               Not affected\nVulnerability Mmio stale data:        Not affected\nVulnerability Reg file data sampling: Not affected\nVulnerability Retbleed:               Not affected\nVulnerability Spec rstack overflow:   Vulnerable: Safe RET, no microcode\nVulnerability Spec store bypass:      Mitigation; Speculative Store Bypass disabled via prctl\nVulnerability Spectre v1:             Mitigation; usercopy/swapgs barriers and __user pointer sanitization\nVulnerability Spectre v2:             Mitigation; Retpolines; IBPB conditional; IBRS_FW; STIBP disabled; RSB filling; PBRSB-eIBRS Not affected; BHI Not affected\nVulnerability Srbds:                  Not affected\nVulnerability Tsx async abort:        Not affected\n\nVersions of relevant libraries:\n[pip3] numpy==2.2.6\n[pip3] nvidia-cublas-cu12==12.4.5.8\n[pip3] nvidia-cuda-cupti-cu12==12.4.127\n[pip3] nvidia-cuda-nvrtc-cu12==12.4.127\n[pip3] nvidia-cuda-runtime-cu12==12.4.127\n[pip3] nvidia-cudnn-cu12==9.1.0.70\n[pip3] nvidia-cufft-cu12==11.2.1.3\n[pip3] nvidia-curand-cu12==10.3.5.147\n[pip3] nvidia-cusolver-cu12==11.6.1.9\n[pip3] nvidia-cusparse-cu12==12.3.1.170\n[pip3] nvidia-cusparselt-cu12==0.6.2\n[pip3] nvidia-nccl-cu12==2.21.5\n[pip3] nvidia-nvjitlink-cu12==12.4.127\n[pip3] nvidia-nvtx-cu12==12.4.127\n[pip3] torch==2.6.0\n[pip3] torchaudio==2.6.0\n[pip3] torchvision==0.21.0\n[pip3] triton==3.2.0\n[conda] Could not collect",
  "transformers_version": "4.52.3",
  "upper_git_hash": null,
  "tokenizer_pad_token": [
    "<|endoftext|>",
    "151643"
  ],
  "tokenizer_eos_token": [
    "<|im_end|>",
    "151645"
  ],
  "tokenizer_bos_token": [
    null,
    "None"
  ],
  "eot_token_id": 151645,
  "max_length": 32768,
  "task_hashes": {
    "aime24_nofigures": "ac804a969d8b16649db03fa5559e24a882c1e65e559cb40d999128144c292a81"
  },
  "model_source": "vllm",
  "model_name": "simplescaling/s1.1-1.5B",
  "model_name_sanitized": "simplescaling__s1.1-1.5B",
  "system_instruction": null,
  "system_instruction_sha": null,
  "fewshot_as_multiturn": false,
  "chat_template": null,
  "chat_template_sha": null,
  "start_time": 15526.539254674,
  "end_time": 15616.016525699,
  "total_evaluation_time_seconds": "89.47727102499994"
}